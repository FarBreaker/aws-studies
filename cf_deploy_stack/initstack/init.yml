# @format

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DistributionCNAMEs:
    Type: String
    Default: your.domain.com
    Description: "CNAME to add to the Distribution"
  GithubOwner:
    Type: String
    Default: RepoOwner
    Description: "Github repo owner"
  GithubRepo:
    Type: String
    Default: repoName
    Description: "Github repo name"
  GithubOAuthToken:
    Type: String
    Description: "Github personal access token"
  GitBranch:
    Type: String
    Description: "Branch to use for SCM"

Resources:
  WebBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WebBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "WebBucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref WebBucket
                - "/*"

  VideoBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: 3060RuleExpiryRule
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: ONEZONE_IA
              - TransitionInDays: 60
                StorageClass: GLACIER

  BuildingBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: Cleanup
            Status: Enabled
            ExpirationInDays: 2

  Distribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        CNAMEs:
          - !Ref DistributionCNAMEs
        Origins:
          - DomainName: !GetAtt WebBucket.DomainName
            Id: !Ref WebBucket
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultRootObject: index.html
        Enabled: true
        DefaultCacheBehavior:
          MinTTL: 86400
          MaxTTL: 3153600
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          ForwardedValues:
            QueryString: true
          TargetOriginId: !Ref WebBucket
          ViewerProtocolPolicy: "allow-all"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 10
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
  CodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        # The downloaded source code for the build will come from CodePipeline
        Type: CODEPIPELINE
        Name: MyProject
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              #If you use the Ubuntu standard image 2.0 or later, you must specify runtime-versions.
              #If you specify runtime-versions and use an image other than Ubuntu standard image 2.0, the build fails.
              runtime-versions:
                nodejs: 16
            pre_build:
              commands:
                - echo Installing source NPM dependencies...
                - npm install
            build:
              commands:
                - echo Build started on 'date'
                - npm run build
            post_build:
              commands:
                - aws s3 cp --recursive --acl public-read ./build s3://${WebBucket}/
                - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${WebBucket}/
                - aws cloudfront create-invalidation --distribution-id ${Distribution} --paths /index.html
          artifacts:
            files:
              - "build/*"
              - "build/**/*"
      Environment:
        # Linux container with node installed
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:4.0"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt BuildingBucket.Arn
                  - !Join ["", [!GetAtt BuildingBucket.Arn, "/*"]]
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !GetAtt WebBucket.Arn
                  - !Join ["", [!GetAtt WebBucket.Arn, "/*"]]
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "cloudfront:CreateInvalidation"
                Resource:
                  - "*"

  # PipelineWebhook:
  #   Type: AWS::CodePipeline::Webhook
  #   Properties:
  #     Authentication: GITHUB_HMAC
  #     AuthenticationConfiguration:
  #       SecretToken: !Ref GithubOAuthToken
  #     Filters:
  #       - JsonPath: "$.ref"
  #         MatchEquals: refs/heads/{Branch}
  #     TargetPipeline: !Ref CodePipeline
  #     TargetAction: Source
  #     Name: ReleasePipelineHook
  #     TargetPipelineVersion: !GetAtt CodePipeline.Version
  #     RegisterWithThirdParty: true

  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt CodePipeLineRole.Arn
      ArtifactStore:
        Location: !Ref BuildingBucket
        Type: S3
      Stages:
        - Name: Source-Fetching
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: MyApp
              Configuration:
                Owner: !Ref GithubOwner
                Repo: !Ref GithubRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GithubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        # - Name: Code-Check
        #   Actions:
        #     - Name: Sonar-Scan
        #       ActionTypeId:
        #         Owner: AWS
        #         Category: Build
        #         Version: 1
        #         Provider: CodeBuild
        #       InputArtifacts:
        #         - Name: MyApp
        #       Configuration:
        #         ProjectName: !Ref CodeScan
        - Name: Build-Execution
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: MyApp
              OutputArtifacts:
                - Name: MyAppBuild
              Configuration:
                ProjectName: !Ref CodeBuild

  CodePipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt BuildingBucket.Arn
                  - !Join ["", [!GetAtt BuildingBucket.Arn, "/*"]]
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - Distribution
      - DomainName
    Description: URL for website through cloudfront
  S3BucketSecureURL:
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - WebBucket
          - DomainName
    Description: URL of S3 bucket to hold website content
  VideoBucket:
    Value: !Ref VideoBucket
    Description: Name of S3 bucket with video storage
