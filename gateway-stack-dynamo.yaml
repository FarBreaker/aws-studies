# @format

AWSTemplateFormatVersion: "2010-09-09"
Description: API Gateway and Lambda Function with AWS::ApiGatewayV2::Api

Parameters:
  ApiGatewayName:
    Type: String
    Default: GroundControl
  LambdaFunctionName:
    Type: String
    Default: Thruster
  DynamoTableName:
    Type: String
    Default: Hydrogen

Resources:
  #DynamoTable
  Hydrogen:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref DynamoTableName
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S

      KeySchema:
        - AttributeName: ID
          KeyType: HASH

  #Gateway Init
  HttpApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref ApiGatewayName
      ProtocolType: HTTP

  #Gateway Integration
  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApiGateway
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !GetAtt LambdaFunction.Arn
      PayloadFormatVersion: "2.0"

  #Gateway Route
  HttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn: HttpApiIntegration
    Properties:
      RouteKey: $default
      ApiId: !Ref HttpApiGateway
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiIntegration

  #Gateway Stage
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      ApiId: !Ref HttpApiGateway
      AutoDeploy: true

  #IAM Role to allow sts:Allow
  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AppendToLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: ScanTablesPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource: "*"
        - PolicyName: PutAndGetItemFromTable
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:ListTables
                Resource: !Join
                  - ""
                  - - "arn:aws:dynamodb:*:*:table/"
                    - !Ref DynamoTableName

  #Allow Api to invoke Lambda
  HandlerLambdaPermissionApi:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":execute-api:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref HttpApiGateway
          - /*

  HandlerLambdaUpdatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:UpdateFunctionCode
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: arn:aws:iam::000468819253:user/alibi

  #Lambda Function Declaration
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const docClient = new AWS.DynamoDB.DocumentClient()

          async function createItem(params) {
              try {
                  await docClient.put(params).promise()
              } catch (err) {
                  return err
              }
          }
          exports.handler = async (event) => {
              let params = {
                  TableName: process.env.DATABASE_TABLE,
                  Item: {
                      ID: Math.random().toString(),
                      number1: JSON.parse(event.body).number1,
                      number2: JSON.parse(event.body).number2,
                      timestamp: Date(),
                      ip: event.requestContext.http.sourceIp
                  }
              }
              try {
                  await createItem(params)
                  return {
                      statusCode: 200,
                      headers: { "content-type": "application/json" },
                      body: "Item successfully inserted"
                  }
              } catch (err) {
                  return { error: err }
              }
          }
      Description: Example Lambda Function
      Environment:
        Variables:
          DATABASE_TABLE: !Ref Hydrogen
      FunctionName: !Ref LambdaFunctionName
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: nodejs16.x

#Outputs
Outputs:
  ApiUrl:
    Description: URL of the HTTP API
    Value: !Join
      - ""
      - - !Ref HttpApiGateway
        - .execute-api.
        - !Ref AWS::Region
        - .
        - !Ref AWS::URLSuffix
  Table:
    Description: Test table
    Value: !Ref Hydrogen
